{"version":3,"sources":["services/api.js","actions/nodes.js","reducers/nodes.js","actions/blojs.js","reducers/blojs.js","actions/logs.js","reducers/logs.js","actions/mining-queue.js","reducers/mining-queue.js","actions/verification-queue.js","reducers/verification-queue.js","actions/confirmation-queue.js","reducers/confirmation-queue.js","reducers/index.js","services/nodes.js","sagas/nodes.js","services/blojs.js","sagas/blojs.js","services/logs.js","sagas/logs.js","services/mining-queue.js","sagas/mining-queue.js","services/verification-queue.js","sagas/verification-queue.js","services/confirmation-queue.js","sagas/confirmation-queue.js","sagas/index.js","components/Error.js","components/Loading.js","components/Empty.js","components/Queue.js","containers/Bloj.js","containers/Node.js","components/Log.js","components/Logger.js","containers/App.js","helpers/get-random-colour.js","index.js","store.js"],"names":["getOpts","method","uri","qs","body","headers","json","makeRequest","query","data","request","then","response","catch","err","Error","error","message","get","post","put","patch","del","NODES_GET","NODES_GET_SUCCEEDED","NODES_GET_FAILED","initialState","Immutable","Map","items","BLOJS_GET","BLOJS_GET_SUCCEEDED","BLOJS_GET_FAILED","BLOJS_CREATE","BLOJS_CREATE_SUCCEEDED","BLOJS_CREATE_FAILED","BLOJS_ADD","BLOJS_ADD_SUCCEEDED","BLOJS_ADD_FAILED","BLOJS_UPDATE","BLOJS_UPDATE_SUCCEEDED","BLOJS_UPDATE_FAILED","LOGS_GET","LOGS_GET_SUCCEEDED","LOGS_GET_FAILED","LOGS_ADD","LOGS_ADD_SUCCEEDED","LOGS_ADD_FAILED","MINING_QUEUE_GET","MINING_QUEUE_GET_SUCCEEDED","MINING_QUEUE_GET_FAILED","MINING_QUEUE_ADD","MINING_QUEUE_ADD_SUCCEEDED","MINING_QUEUE_ADD_FAILED","MINING_QUEUE_REMOVE","MINING_QUEUE_REMOVE_SUCCEEDED","MINING_QUEUE_REMOVE_FAILED","VERIFICATION_QUEUE_GET","VERIFICATION_QUEUE_GET_SUCCEEDED","VERIFICATION_QUEUE_GET_FAILED","VERIFICATION_QUEUE_ADD","VERIFICATION_QUEUE_ADD_SUCCEEDED","VERIFICATION_QUEUE_ADD_FAILED","VERIFICATION_QUEUE_REMOVE","VERIFICATION_QUEUE_REMOVE_SUCCEEDED","VERIFICATION_QUEUE_REMOVE_FAILED","CONFIRMATION_QUEUE_GET","CONFIRMATION_QUEUE_GET_SUCCEEDED","CONFIRMATION_QUEUE_GET_FAILED","CONFIRMATION_QUEUE_ADD","CONFIRMATION_QUEUE_ADD_SUCCEEDED","CONFIRMATION_QUEUE_ADD_FAILED","CONFIRMATION_QUEUE_REMOVE","CONFIRMATION_QUEUE_REMOVE_SUCCEEDED","CONFIRMATION_QUEUE_REMOVE_FAILED","combineReducers","nodes","state","action","type","blojs","currentState","toJS","node","meta","id","loading","push","foundIndex","findIndex","item","logs","map","log","concat","sort","a","b","timestamp","Object","assign","miningQueue","bloj","c","splice","verificationQueue","confirmationQueue","api","require","process","REACT_APP_SEED_HOST","REACT_APP_SEED_PORT","getNodes","takeLatest","call","nodesService","create","serverHost","serverPort","args","getBlojs","createBloj","addBloj","updateBloj","takeEvery","blojsService","getLogs","addLog","logsService","getMiningQueue","addBlojToMiningQueue","removeBlojFromMiningQueue","miningQueueService","getVerificationQueue","addBlojToVerificationQueue","removeBlojFromVerificationQueue","verificationQueueService","getConfirmationQueue","addBlojToConfirmationQueue","removeBlojFromConfirmationQueue","confirmationQueueService","all","props","color","Loading","Queue","toggle","bind","open","undefined","nextProps","nextState","deepEqual","this","children","forceScroll","scrollElem","scrollLeft","scrollWidth","e","preventDefault","setState","className","title","href","onClick","name","length","Empty","ref","elem","Component","Bloj","onChange","onSubmit","socket","key","value","JSON","parse","row","for","sm","target","height","nonce","stringify","prevHash","hash","confirmations","check","size","offset","connect","Node","io","socketHost","socketPort","on","host","blojsError","miningQueueError","verificationQueueError","confirmationQueueError","blojsLoading","miningQueueLoading","verificationQueueLoading","confirmationQueueLoading","blojItems","miningQueueItems","verificationQueueItems","confirmationQueueItems","xs","i","md","lg","Log","style","colour","moment","format","arg","Logger","scroll","scrollTop","scrollHeight","document","getElementsByTagName","classList","add","remove","App","Math","floor","random","getRandomColour","seed","dotenv","config","store","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","run","sagas","configureStore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0f560867.chunk.js","sourcesContent":["import request from 'request-promise';\n\nconst getOpts = (method, uri, qs = {}, body = {}) => {\n  return {\n    method,\n    uri,\n    qs,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body,\n    json: true,\n  };\n};\n\nconst makeRequest = (method, uri, query = {}, data = {}) => {\n  return request(getOpts(method, uri, query, data))\n    .then((response) => {\n      return response;\n    })\n    .catch((err) => {\n      throw new Error(err.error.message);\n    });\n};\n\nexport function get (uri, query = {}) {\n  return makeRequest('get', uri, query);\n}\n\nexport function post (uri, data = {}, query = {}) {\n  return makeRequest('post', uri, query, data);\n}\n\nexport function put (uri, data = {}, query = {}) {\n  return makeRequest('put', uri, query, data);\n}\n\nexport function patch (uri, data = {}, query = {}) {\n  return makeRequest('patch', uri, query, data);\n}\n\nexport function del (uri, query = {}) {\n  return makeRequest('delete', uri, query);\n}\n","export const NODES_GET = 'NODES_GET';\nexport const NODES_GET_SUCCEEDED = 'NODES_GET_SUCCESSFUL';\nexport const NODES_GET_FAILED = 'NODES_GET_UNSUCCESSFUL';\n\nexport function getNodes(seed) {\n  return {\n    type: NODES_GET,\n    seed,\n  };\n}","import Immutable from 'immutable';\nimport { NODES_GET_SUCCEEDED, NODES_GET_FAILED } from '../actions/nodes';\n\nconst initialState = Immutable.Map({\n  items: [],\n  error: null,\n});\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case NODES_GET_SUCCEEDED:\n      return Immutable.Map({\n        items: action.data,\n        error: null,\n      });\n\n    case NODES_GET_FAILED:\n      return Immutable.Map({\n        items: [],\n        error: action.error,\n      });\n\n    default:\n      return state;\n  }\n}","export const BLOJS_GET = 'BLOJS_GET';\nexport const BLOJS_GET_SUCCEEDED = 'BLOJS_GET_SUCCEEDED';\nexport const BLOJS_GET_FAILED = 'BLOJS_GET_FAILED';\n\nexport const BLOJS_CREATE = 'BLOJS_CREATE';\nexport const BLOJS_CREATE_SUCCEEDED = 'BLOJS_CREATE_SUCCEEDED';\nexport const BLOJS_CREATE_FAILED = 'BLOJS_CREATE_FAILED';\n\nexport const BLOJS_ADD = 'BLOJS_ADD';\nexport const BLOJS_ADD_SUCCEEDED = 'BLOJS_ADD_SUCCEEDED';\nexport const BLOJS_ADD_FAILED = 'BLOJS_ADD_FAILED';\n\nexport const BLOJS_UPDATE = 'BLOJS_UPDATE';\nexport const BLOJS_UPDATE_SUCCEEDED = 'BLOJS_UPDATE_SUCCEEDED';\nexport const BLOJS_UPDATE_FAILED = 'BLOJS_UPDATE_FAILED';\n\nexport function getBlojs(node) {\n  return {\n    type: BLOJS_GET,\n    node,\n  };\n}\n\nexport function createBloj(bloj, node) {\n  return {\n    type: BLOJS_CREATE,\n    bloj,\n    node,\n  };\n}\n\nexport function addBloj(bloj, node) {\n  return {\n    type: BLOJS_ADD,\n    bloj,\n    node,\n  };\n}\n\nexport function updateBloj(bloj, node) {\n  return {\n    type: BLOJS_UPDATE,\n    bloj,\n    node,\n  };\n}","import Immutable from 'immutable';\nimport { BLOJS_GET, BLOJS_GET_SUCCEEDED, BLOJS_GET_FAILED, BLOJS_CREATE_SUCCEEDED, BLOJS_CREATE_FAILED , BLOJS_ADD_SUCCEEDED, BLOJS_ADD_FAILED, BLOJS_UPDATE_SUCCEEDED, BLOJS_UPDATE_FAILED } from '../actions/blojs';\n\nconst initialState = Immutable.Map({});\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case BLOJS_GET: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: [],\n        loading: true,\n        error: null,\n      };\n    \n      return Immutable.Map(currentState);\n    }\n\n    case BLOJS_GET_SUCCEEDED: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: action.data,\n        loading: false,\n        error: null,\n      };\n    \n      return Immutable.Map(currentState);\n    }\n\n    case BLOJS_CREATE_SUCCEEDED:\n      return state;\n\n    case BLOJS_ADD_SUCCEEDED: {\n      const currentState = state.toJS();\n    \n      currentState[action.node.meta.id].items.push(action.data);\n        \n      return Immutable.Map(currentState);\n    }\n\n    case BLOJS_UPDATE_SUCCEEDED: {\n      const currentState = state.toJS();\n      const items = currentState[action.node.meta.id].items;\n      const foundIndex = items.findIndex(item => item.id === action.data.id);\n\n      if (foundIndex !== -1) {\n        items[foundIndex] = action.data;\n      }\n\n      currentState[action.node.meta.id].items = items;\n          \n      return Immutable.Map(currentState);\n    }\n\n    case BLOJS_GET_FAILED:\n    case BLOJS_CREATE_FAILED:\n    case BLOJS_ADD_FAILED:\n    case BLOJS_UPDATE_FAILED: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: [],\n        error: action.error,\n      };\n      \n      return Immutable.Map(currentState);\n    }\n\n    default:\n      return state;\n  }\n}","export const LOGS_GET = 'LOGS_GET';\nexport const LOGS_GET_SUCCEEDED = 'LOGS_GET_SUCCESSFUL';\nexport const LOGS_GET_FAILED = 'LOGS_GET_UNSUCCESSFUL';\n\nexport const LOGS_ADD = 'LOGS_ADD';\nexport const LOGS_ADD_SUCCEEDED = 'LOGS_ADD_SUCCESSFUL';\nexport const LOGS_ADD_FAILED = 'LOGS_ADD_UNSUCCESSFUL';\n\nexport function getLogs(node) {\n  return {\n    type: LOGS_GET,\n    node,\n  };\n}\n\nexport function addLog(log, node) {\n  return {\n    type: LOGS_ADD,\n    node,\n    log,\n  };\n}","import Immutable from 'immutable';\nimport { LOGS_GET_SUCCEEDED, LOGS_GET_FAILED, LOGS_ADD_SUCCEEDED, LOGS_ADD_FAILED } from '../actions/logs';\n\nconst initialState = Immutable.Map({\n  items: [],\n  error: null,\n});\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case LOGS_GET_SUCCEEDED: {\n      const currentState = state.toJS();\n\n      const logs = action.data\n        .map((log) => {\n          log.node = action.node;\n          \n          return log;\n        });\n\n      currentState.items = currentState.items\n        .concat(logs)\n        .sort((a, b) => a.timestamp - b.timestamp);\n    \n      return Immutable.Map(currentState);\n    }\n\n    case LOGS_ADD_SUCCEEDED: {\n      const currentState = state.toJS();\n      \n      currentState.items.push(Object.assign({}, action.log, { node: action.node }));\n      currentState.items = currentState.items.sort((a, b) => a.timestamp - b.timestamp);\n          \n      return Immutable.Map(currentState);\n    }\n    \n    case LOGS_ADD_FAILED:\n    case LOGS_GET_FAILED: {\n      return Immutable.Map({\n        items: [],\n        error: action.error,\n      });\n    }\n\n    default:\n      return state;\n  }\n}","export const MINING_QUEUE_GET = 'MINING_QUEUE_GET';\nexport const MINING_QUEUE_GET_SUCCEEDED = 'MINING_QUEUE_GET_SUCCESSFUL';\nexport const MINING_QUEUE_GET_FAILED = 'MINING_QUEUE_GET_UNSUCCESSFUL';\n\nexport const MINING_QUEUE_ADD = 'MINING_QUEUE_ADD';\nexport const MINING_QUEUE_ADD_SUCCEEDED = 'MINING_QUEUE_ADD_SUCCESSFUL';\nexport const MINING_QUEUE_ADD_FAILED = 'MINING_QUEUE_ADD_UNSUCCESSFUL';\n\nexport const MINING_QUEUE_REMOVE = 'MINING_QUEUE_REMOVE';\nexport const MINING_QUEUE_REMOVE_SUCCEEDED = 'MINING_QUEUE_REMOVE_SUCCEEDED';\nexport const MINING_QUEUE_REMOVE_FAILED = 'MINING_QUEUE_REMOVE_FAILED';\n\nexport function getMiningQueue(node) {\n  return {\n    type: MINING_QUEUE_GET,\n    node,\n  };\n}\n\nexport function addBlojToMiningQueue(bloj, node) {\n  return {\n    type: MINING_QUEUE_ADD,\n    node,\n    bloj,\n  };\n}\n\nexport function removeBlojFromMiningQueue(bloj, node) {\n  return {\n    type: MINING_QUEUE_REMOVE,\n    node,\n    bloj,\n  };\n}","import Immutable from 'immutable';\nimport { MINING_QUEUE_GET, MINING_QUEUE_GET_SUCCEEDED, MINING_QUEUE_GET_FAILED, MINING_QUEUE_ADD_SUCCEEDED, MINING_QUEUE_ADD_FAILED, MINING_QUEUE_REMOVE_SUCCEEDED, MINING_QUEUE_REMOVE_FAILED } from '../actions/mining-queue';\n\nconst initialState = Immutable.Map({});\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case MINING_QUEUE_GET: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: [],\n        loading: true,\n        error: null,\n      };\n    \n      return Immutable.Map(currentState);\n    }\n\n    case MINING_QUEUE_GET_SUCCEEDED: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: action.data,\n        error: null,\n      };\n    \n      return Immutable.Map(currentState);\n    }\n\n    case MINING_QUEUE_ADD_SUCCEEDED: {\n      const currentState = state.toJS();\n    \n      currentState[action.node.meta.id].items.push(action.bloj);\n        \n      return Immutable.Map(currentState);\n    }\n\n    case MINING_QUEUE_REMOVE_SUCCEEDED: {\n      const currentState = state.toJS();\n      const foundIndex = currentState[action.node.meta.id].items.findIndex(c => c.id === action.bloj.id);\n    \n      currentState[action.node.meta.id].items.splice(foundIndex, 1);\n        \n      return Immutable.Map(currentState);\n    }\n\n    case MINING_QUEUE_GET_FAILED:\n    case MINING_QUEUE_ADD_FAILED:\n    case MINING_QUEUE_REMOVE_FAILED: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: [],\n        error: action.error,\n      };\n      \n      return Immutable.Map(currentState);\n    }\n\n    default:\n      return state;\n  }\n}","export const VERIFICATION_QUEUE_GET = 'VERIFICATION_QUEUE_GET';\nexport const VERIFICATION_QUEUE_GET_SUCCEEDED = 'VERIFICATION_QUEUE_GET_SUCCESSFUL';\nexport const VERIFICATION_QUEUE_GET_FAILED = 'VERIFICATION_QUEUE_GET_UNSUCCESSFUL';\n\nexport const VERIFICATION_QUEUE_ADD = 'VERIFICATION_QUEUE_ADD';\nexport const VERIFICATION_QUEUE_ADD_SUCCEEDED = 'VERIFICATION_QUEUE_ADD_SUCCESSFUL';\nexport const VERIFICATION_QUEUE_ADD_FAILED = 'VERIFICATION_QUEUE_ADD_UNSUCCESSFUL';\n\nexport const VERIFICATION_QUEUE_REMOVE = 'VERIFICATION_QUEUE_REMOVE';\nexport const VERIFICATION_QUEUE_REMOVE_SUCCEEDED = 'VERIFICATION_QUEUE_REMOVE_SUCCEEDED';\nexport const VERIFICATION_QUEUE_REMOVE_FAILED = 'VERIFICATION_QUEUE_REMOVE_FAILED';\n\nexport function getVerificationQueue(node) {\n  return {\n    type: VERIFICATION_QUEUE_GET,\n    node,\n  };\n}\n\nexport function addBlojToVerificationQueue(bloj, node) {\n  return {\n    type: VERIFICATION_QUEUE_ADD,\n    node,\n    bloj,\n  };\n}\n\nexport function removeBlojFromVerificationQueue(bloj, node) {\n  return {\n    type: VERIFICATION_QUEUE_REMOVE,\n    node,\n    bloj,\n  };\n}","import Immutable from 'immutable';\nimport { VERIFICATION_QUEUE_GET, VERIFICATION_QUEUE_GET_SUCCEEDED, VERIFICATION_QUEUE_GET_FAILED, VERIFICATION_QUEUE_ADD_SUCCEEDED, VERIFICATION_QUEUE_ADD_FAILED, VERIFICATION_QUEUE_REMOVE_SUCCEEDED, VERIFICATION_QUEUE_REMOVE_FAILED } from '../actions/verification-queue';\n\nconst initialState = Immutable.Map({});\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case VERIFICATION_QUEUE_GET: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: [],\n        loading: true,\n        error: null,\n      };\n    \n      return Immutable.Map(currentState);\n    }\n\n    case VERIFICATION_QUEUE_GET_SUCCEEDED: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: action.data,\n        error: null,\n      };\n    \n      return Immutable.Map(currentState);\n    }\n\n    case VERIFICATION_QUEUE_ADD_SUCCEEDED: {\n      const currentState = state.toJS();\n    \n      currentState[action.node.meta.id].items.push(action.bloj);\n        \n      return Immutable.Map(currentState);\n    }\n\n    case VERIFICATION_QUEUE_REMOVE_SUCCEEDED: {\n      const currentState = state.toJS();\n      const foundIndex = currentState[action.node.meta.id].items.findIndex(c => c.id === action.bloj.id);\n    \n      currentState[action.node.meta.id].items.splice(foundIndex, 1);\n        \n      return Immutable.Map(currentState);\n    }\n\n    case VERIFICATION_QUEUE_GET_FAILED:\n    case VERIFICATION_QUEUE_ADD_FAILED:\n    case VERIFICATION_QUEUE_REMOVE_FAILED: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: [],\n        error: action.error,\n      };\n      \n      return Immutable.Map(currentState);\n    }\n\n    default:\n      return state;\n  }\n}","export const CONFIRMATION_QUEUE_GET = 'CONFIRMATION_QUEUE_GET';\nexport const CONFIRMATION_QUEUE_GET_SUCCEEDED = 'CONFIRMATION_QUEUE_GET_SUCCESSFUL';\nexport const CONFIRMATION_QUEUE_GET_FAILED = 'CONFIRMATION_QUEUE_GET_UNSUCCESSFUL';\n\nexport const CONFIRMATION_QUEUE_ADD = 'CONFIRMATION_QUEUE_ADD';\nexport const CONFIRMATION_QUEUE_ADD_SUCCEEDED = 'CONFIRMATION_QUEUE_ADD_SUCCESSFUL';\nexport const CONFIRMATION_QUEUE_ADD_FAILED = 'CONFIRMATION_QUEUE_ADD_UNSUCCESSFUL';\n\nexport const CONFIRMATION_QUEUE_REMOVE = 'CONFIRMATION_QUEUE_REMOVE';\nexport const CONFIRMATION_QUEUE_REMOVE_SUCCEEDED = 'CONFIRMATION_QUEUE_REMOVE_SUCCEEDED';\nexport const CONFIRMATION_QUEUE_REMOVE_FAILED = 'CONFIRMATION_QUEUE_REMOVE_FAILED';\n\nexport function getConfirmationQueue(node) {\n  return {\n    type: CONFIRMATION_QUEUE_GET,\n    node,\n  };\n}\n\nexport function addBlojToConfirmationQueue(bloj, node) {\n  return {\n    type: CONFIRMATION_QUEUE_ADD,\n    node,\n    bloj,\n  };\n}\n\nexport function removeBlojFromConfirmationQueue(bloj, node) {\n  return {\n    type: CONFIRMATION_QUEUE_REMOVE,\n    node,\n    bloj,\n  };\n}","import Immutable from 'immutable';\nimport { CONFIRMATION_QUEUE_GET, CONFIRMATION_QUEUE_GET_SUCCEEDED, CONFIRMATION_QUEUE_GET_FAILED, CONFIRMATION_QUEUE_ADD_SUCCEEDED, CONFIRMATION_QUEUE_ADD_FAILED, CONFIRMATION_QUEUE_REMOVE_SUCCEEDED, CONFIRMATION_QUEUE_REMOVE_FAILED } from '../actions/confirmation-queue';\n\nconst initialState = Immutable.Map({});\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case CONFIRMATION_QUEUE_GET: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: [],\n        loading: true,\n        error: null,\n      };\n    \n      return Immutable.Map(currentState);\n    }\n\n    case CONFIRMATION_QUEUE_GET_SUCCEEDED: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: action.data,\n        error: null,\n      };\n    \n      return Immutable.Map(currentState);\n    }\n\n    case CONFIRMATION_QUEUE_ADD_SUCCEEDED: {\n      const currentState = state.toJS();\n    \n      currentState[action.node.meta.id].items.push(action.bloj);\n        \n      return Immutable.Map(currentState);\n    }\n\n    case CONFIRMATION_QUEUE_REMOVE_SUCCEEDED: {\n      const currentState = state.toJS();\n      const foundIndex = currentState[action.node.meta.id].items.findIndex(c => c.id === action.bloj.id);\n    \n      currentState[action.node.meta.id].items.splice(foundIndex, 1);\n        \n      return Immutable.Map(currentState);\n    }\n\n    case CONFIRMATION_QUEUE_GET_FAILED:\n    case CONFIRMATION_QUEUE_ADD_FAILED:\n    case CONFIRMATION_QUEUE_REMOVE_FAILED: {\n      const currentState = state.toJS();\n\n      currentState[action.node.meta.id] = {\n        items: [],\n        error: action.error,\n      };\n      \n      return Immutable.Map(currentState);\n    }\n\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport nodes from './nodes';\nimport blojs from './blojs';\nimport logs from './logs';\nimport miningQueue from './mining-queue';\nimport verificationQueue from './verification-queue';\nimport confirmationQueue from './confirmation-queue';\n\nexport default combineReducers({\n  nodes,\n  blojs,\n  logs,\n  miningQueue,\n  verificationQueue,\n  confirmationQueue,\n});","const api = require('./api');\n\nexport function* get() {\n  return yield api.get(`http://${process.env.REACT_APP_SEED_HOST}:${process.env.REACT_APP_SEED_PORT}/peers`);\n}","import { takeLatest, call, put } from 'redux-saga/effects';\nimport { NODES_GET, NODES_GET_SUCCEEDED, NODES_GET_FAILED } from '../actions/nodes';\nimport * as nodesService from '../services/nodes';\n\nexport function* getNodes() {\n  yield takeLatest(NODES_GET, function* () {\n    try {\n      const data = yield call(nodesService.get);\n\n      yield put({\n        type: NODES_GET_SUCCEEDED,\n        data,\n      })\n    } catch (error) {\n      yield put({\n        type: NODES_GET_FAILED,\n        error,\n      });\n    }\n  });\n}","const api = require('./api');\n\nexport function* get(node) {\n  return yield api.get(`http://${node.meta.serverHost}:${node.meta.serverPort}/blojs`);\n}\n\nexport function* create(args) {\n  const [\n    bloj,\n    node,\n  ] = args;\n\n  return yield api.post(`http://${node.meta.serverHost}:${node.meta.serverPort}/blojs`, bloj);\n}","import { takeEvery, takeLatest, call, put } from 'redux-saga/effects';\nimport { BLOJS_GET, BLOJS_GET_SUCCEEDED, BLOJS_GET_FAILED, BLOJS_CREATE, BLOJS_CREATE_SUCCEEDED, BLOJS_CREATE_FAILED, BLOJS_ADD, BLOJS_ADD_SUCCEEDED, BLOJS_ADD_FAILED, BLOJS_UPDATE, BLOJS_UPDATE_SUCCEEDED, BLOJS_UPDATE_FAILED } from '../actions/blojs';\nimport * as blojsService from '../services/blojs';\n\nexport function* getBlojs() {\n  yield takeEvery(BLOJS_GET, function* (action) {\n    try {\n      const data = yield call(blojsService.get, action.node);\n\n      yield put({\n        type: BLOJS_GET_SUCCEEDED,\n        node: action.node,\n        data,\n      })\n    } catch (error) {\n      yield put({\n        type: BLOJS_GET_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}\n\nexport function* createBloj() {\n  yield takeLatest(BLOJS_CREATE, function* (action) {\n    try {\n      const data = yield call(blojsService.create, [action.bloj, action.node]);\n\n      yield put({\n        type: BLOJS_CREATE_SUCCEEDED,\n        node: action.node,\n        data,\n      })\n    } catch (error) {\n      yield put({\n        type: BLOJS_CREATE_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}\n\nexport function* addBloj() {\n  yield takeEvery(BLOJS_ADD, function* (action) {\n    try {\n      yield put({\n        type: BLOJS_ADD_SUCCEEDED,\n        node: action.node,\n        data: action.bloj,\n      })\n    } catch (error) {\n      yield put({\n        type: BLOJS_ADD_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}\n\nexport function* updateBloj() {\n  yield takeEvery(BLOJS_UPDATE, function* (action) {\n    try {\n      yield put({\n        type: BLOJS_UPDATE_SUCCEEDED,\n        node: action.node,\n        data: action.bloj,\n      })\n    } catch (error) {\n      yield put({\n        type: BLOJS_UPDATE_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}","const api = require('./api');\n\nexport function* get(node) {\n  return yield api.get(`http://${node.meta.serverHost}:${node.meta.serverPort}/logs`);\n}","import { takeEvery, call, put } from 'redux-saga/effects';\nimport { LOGS_GET, LOGS_GET_SUCCEEDED, LOGS_GET_FAILED, LOGS_ADD, LOGS_ADD_SUCCEEDED, LOGS_ADD_FAILED } from '../actions/logs';\nimport * as logsService from '../services/logs';\n\nexport function* getLogs() {\n  yield takeEvery(LOGS_GET, function* (action) {\n    try {\n      const data = yield call(logsService.get, action.node);\n\n      yield put({\n        type: LOGS_GET_SUCCEEDED,\n        node: action.node,\n        data,\n      })\n    } catch (error) {\n      yield put({\n        type: LOGS_GET_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}\n\nexport function* addLog() {\n  yield takeEvery(LOGS_ADD, function* (action) {\n    try {\n      yield put({\n        type: LOGS_ADD_SUCCEEDED,\n        node: action.node,\n        log: action.log,\n      })\n    } catch (error) {\n      yield put({\n        type: LOGS_ADD_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}","const api = require('./api');\n\nexport function* get(node) {\n  return yield api.get(`http://${node.meta.serverHost}:${node.meta.serverPort}/queues/miner`);\n}","import { takeEvery, call, put } from 'redux-saga/effects';\nimport { MINING_QUEUE_GET, MINING_QUEUE_GET_SUCCEEDED, MINING_QUEUE_GET_FAILED, MINING_QUEUE_ADD, MINING_QUEUE_ADD_SUCCEEDED, MINING_QUEUE_ADD_FAILED, MINING_QUEUE_REMOVE, MINING_QUEUE_REMOVE_SUCCEEDED, MINING_QUEUE_REMOVE_FAILED } from '../actions/mining-queue';\nimport * as miningQueueService from '../services/mining-queue';\n\nexport function* getMiningQueue() {\n  yield takeEvery(MINING_QUEUE_GET, function* (action) {\n    try {\n      const data = yield call(miningQueueService.get, action.node);\n\n      yield put({\n        type: MINING_QUEUE_GET_SUCCEEDED,\n        node: action.node,\n        data,\n      })\n    } catch (error) {\n      yield put({\n        type: MINING_QUEUE_GET_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}\n\nexport function* addBlojToMiningQueue() {\n  yield takeEvery(MINING_QUEUE_ADD, function* (action) {\n    try {\n      yield put({\n        type: MINING_QUEUE_ADD_SUCCEEDED,\n        node: action.node,\n        bloj: action.bloj,\n      })\n    } catch (error) {\n      yield put({\n        type: MINING_QUEUE_ADD_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}\n\nexport function* removeBlojFromMiningQueue() {\n  yield takeEvery(MINING_QUEUE_REMOVE, function* (action) {\n    try {\n      yield put({\n        type: MINING_QUEUE_REMOVE_SUCCEEDED,\n        node: action.node,\n        bloj: action.bloj,\n      })\n    } catch (error) {\n      yield put({\n        type: MINING_QUEUE_REMOVE_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}","const api = require('./api');\n\nexport function* get(node) {\n  return yield api.get(`http://${node.meta.serverHost}:${node.meta.serverPort}/queues/verifier`);\n}","import { takeEvery, call, put } from 'redux-saga/effects';\nimport { VERIFICATION_QUEUE_GET, VERIFICATION_QUEUE_GET_SUCCEEDED, VERIFICATION_QUEUE_GET_FAILED, VERIFICATION_QUEUE_ADD, VERIFICATION_QUEUE_ADD_SUCCEEDED, VERIFICATION_QUEUE_ADD_FAILED, VERIFICATION_QUEUE_REMOVE, VERIFICATION_QUEUE_REMOVE_SUCCEEDED, VERIFICATION_QUEUE_REMOVE_FAILED } from '../actions/verification-queue';\nimport * as verificationQueueService from '../services/verification-queue';\n\nexport function* getVerificationQueue() {\n  yield takeEvery(VERIFICATION_QUEUE_GET, function* (action) {\n    try {\n      const data = yield call(verificationQueueService.get, action.node);\n\n      yield put({\n        type: VERIFICATION_QUEUE_GET_SUCCEEDED,\n        node: action.node,\n        data,\n      })\n    } catch (error) {\n      yield put({\n        type: VERIFICATION_QUEUE_GET_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}\n\nexport function* addBlojToVerificationQueue() {\n  yield takeEvery(VERIFICATION_QUEUE_ADD, function* (action) {\n    try {\n      yield put({\n        type: VERIFICATION_QUEUE_ADD_SUCCEEDED,\n        node: action.node,\n        bloj: action.bloj,\n      })\n    } catch (error) {\n      yield put({\n        type: VERIFICATION_QUEUE_ADD_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}\n\nexport function* removeBlojFromVerificationQueue() {\n  yield takeEvery(VERIFICATION_QUEUE_REMOVE, function* (action) {\n    try {\n      yield put({\n        type: VERIFICATION_QUEUE_REMOVE_SUCCEEDED,\n        node: action.node,\n        bloj: action.bloj,\n      })\n    } catch (error) {\n      yield put({\n        type: VERIFICATION_QUEUE_REMOVE_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}","const api = require('./api');\n\nexport function* get(node) {\n  return yield api.get(`http://${node.meta.serverHost}:${node.meta.serverPort}/queues/confirmer`);\n}","import { takeEvery, call, put } from 'redux-saga/effects';\nimport { CONFIRMATION_QUEUE_GET, CONFIRMATION_QUEUE_GET_SUCCEEDED, CONFIRMATION_QUEUE_GET_FAILED, CONFIRMATION_QUEUE_ADD, CONFIRMATION_QUEUE_ADD_SUCCEEDED, CONFIRMATION_QUEUE_ADD_FAILED, CONFIRMATION_QUEUE_REMOVE, CONFIRMATION_QUEUE_REMOVE_SUCCEEDED, CONFIRMATION_QUEUE_REMOVE_FAILED } from '../actions/confirmation-queue';\nimport * as confirmationQueueService from '../services/confirmation-queue';\n\nexport function* getConfirmationQueue() {\n  yield takeEvery(CONFIRMATION_QUEUE_GET, function* (action) {\n    try {\n      const data = yield call(confirmationQueueService.get, action.node);\n\n      yield put({\n        type: CONFIRMATION_QUEUE_GET_SUCCEEDED,\n        node: action.node,\n        data,\n      })\n    } catch (error) {\n      yield put({\n        type: CONFIRMATION_QUEUE_GET_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}\n\nexport function* addBlojToConfirmationQueue() {\n  yield takeEvery(CONFIRMATION_QUEUE_ADD, function* (action) {\n    try {\n      yield put({\n        type: CONFIRMATION_QUEUE_ADD_SUCCEEDED,\n        node: action.node,\n        bloj: action.bloj,\n      })\n    } catch (error) {\n      yield put({\n        type: CONFIRMATION_QUEUE_ADD_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}\n\nexport function* removeBlojFromConfirmationQueue() {\n  yield takeEvery(CONFIRMATION_QUEUE_REMOVE, function* (action) {\n    try {\n      yield put({\n        type: CONFIRMATION_QUEUE_REMOVE_SUCCEEDED,\n        node: action.node,\n        bloj: action.bloj,\n      })\n    } catch (error) {\n      yield put({\n        type: CONFIRMATION_QUEUE_REMOVE_FAILED,\n        node: action.node,\n        error,\n      });\n    }\n  });\n}","import { all } from 'redux-saga/effects';\nimport { getNodes } from './nodes';\nimport { getBlojs, createBloj, addBloj, updateBloj } from './blojs';\nimport { getLogs, addLog } from './logs';\nimport { getMiningQueue, addBlojToMiningQueue, removeBlojFromMiningQueue } from './mining-queue';\nimport { getVerificationQueue, addBlojToVerificationQueue, removeBlojFromVerificationQueue } from './verification-queue';\nimport { getConfirmationQueue, addBlojToConfirmationQueue, removeBlojFromConfirmationQueue } from './confirmation-queue';\n\nexport default function* () {\n  yield all([\n    getNodes(),\n    getBlojs(),\n    createBloj(),\n    addBloj(),\n    updateBloj(),\n    getLogs(),\n    addLog(),\n    getMiningQueue(),\n    addBlojToMiningQueue(),\n    removeBlojFromMiningQueue(),\n    getVerificationQueue(),\n    addBlojToVerificationQueue(),\n    removeBlojFromVerificationQueue(),\n    getConfirmationQueue(),\n    addBlojToConfirmationQueue(),\n    removeBlojFromConfirmationQueue(),\n  ]);\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert } from 'reactstrap';\n\nconst Error = (props) => (\n  <Alert color=\"danger\">\n    {props.message || 'There has been an error'}\n  </Alert>\n);\n\nError.propTypes = {\n  message: PropTypes.string,\n}\n\nexport default Error;","import React from 'react';\nimport { Alert } from 'reactstrap';\n\nconst Loading = () => (\n  <Alert color=\"primary\">\n    Loading...\n  </Alert>\n);\n\nexport default Loading;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert } from 'reactstrap';\n\nconst Loading = (props) => (\n  <Alert color=\"secondary\">\n    {props.message || 'No data found'}\n  </Alert>\n);\n\nLoading.propTypes = {\n  message: PropTypes.string,\n}\n\nexport default Loading;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport deepEqual from 'deep-equal';\nimport Error from './Error';\nimport Loading from './Loading';\nimport Empty from './Empty';\nimport FontAwesome from 'react-fontawesome';\nimport './Queue.css';\n\nclass Queue extends Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    open: PropTypes.bool,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    children: PropTypes.array.isRequired,\n    forceScroll: PropTypes.bool,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n\n    this.state = {\n      open: props.open !== undefined ? props.open : false,\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (!deepEqual(this.props.error, nextProps.error)) {\n      return true;\n    }\n\n    if (!deepEqual(this.props.loading, nextProps.loading)) {\n      return true;\n    }\n\n    if (!deepEqual(this.props.children, nextProps.children)) {\n      return true;\n    }\n    \n    if (this.state.open !== nextState.open) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidUpdate() {\n    if (this.props.forceScroll && this.scrollElem) {\n      this.scrollElem.scrollLeft = this.scrollElem.scrollWidth;\n    }\n  }\n\n  toggle(e) {\n    e.preventDefault();\n\n    this.setState({\n      open: !this.state.open,\n    });\n  }\n\n  render() {\n    return (\n      <div className={`queue ${this.state.open && 'open'}`}>\n        <div className=\"clearfix\">\n          <h2 className=\"float-left\">{this.props.title}</h2>\n\n          <a className=\"float-left\" href=\"#toggle\" onClick={this.toggle}>\n            {this.state.open ? (\n              <FontAwesome name=\"minus-square-o\" />\n            ) : (\n              <FontAwesome name=\"plus-square-o\" />\n            )}\n          </a>\n        </div>\n\n        {this.state.open && this.props.error && (\n          <Error message={this.props.error.message} />\n        )}\n\n        {this.state.open && !this.props.error && this.props.loading ? (\n          <Loading />\n        ) : null}\n\n        {this.state.open && !this.props.error && !this.props.loading && !this.props.children.length ? (\n          <Empty message=\"No data to show\" />\n        ) : null}\n\n        {this.state.open && !this.props.error && !this.props.loading && this.props.children.length ? (\n          <div className=\"row scroll\" ref={(elem) => { this.scrollElem = elem; }}>\n            {this.props.children}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default Queue;\n","import React, { Component, } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport deepEqual from 'deep-equal';\nimport { createBloj } from '../actions/blojs';\nimport { Col, Card, CardBody, Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport './Bloj.css';\n\nclass Bloj extends Component {\n  static propTypes = {\n    createBloj: PropTypes.func.isRequired,\n\n    node: PropTypes.object,\n    bloj: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      bloj: props.bloj || {\n        data: '',\n      }, \n      socket: null,\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!deepEqual(this.state.bloj, nextProps.bloj)) {\n      this.setState({\n        bloj: nextProps.bloj,\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (!deepEqual(this.props.bloj, nextProps.bloj)) {\n      return true;\n    }\n\n    if (!deepEqual(this.state.bloj, nextState.bloj)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  onChange(key, value) {\n    const bloj = Object.assign({}, this.state.bloj, {\n      [key]: value\n    });\n\n    this.setState({ bloj });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    this.props.createBloj(JSON.parse(this.state.bloj.data), this.props.node);\n        \n    this.setState({\n      bloj: {\n        data: '',\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Card>\n        <CardBody>\n          <Form className=\"bloj\" onSubmit={this.onSubmit}>\n            {this.state.bloj.id && (\n              <FormGroup row>\n                <Label for=\"id\" sm={4}>ID</Label>\n                <Col sm={8}>\n                  <Input type=\"text\" name=\"id\" value={this.state.bloj.id} onChange={e => this.onChange('id', e.target.value)} />\n                </Col>\n              </FormGroup>\n            )}\n\n            {this.state.bloj.height && (\n              <FormGroup row>\n                <Label for=\"height\" sm={4}>Height</Label>\n                <Col sm={8}>\n                  <Input type=\"text\" name=\"height\" value={this.state.bloj.height} onChange={e => this.onChange('height', e.target.value)} />\n                </Col>\n              </FormGroup>\n            )}\n\n            {this.state.bloj.nonce && (\n              <FormGroup row>\n                <Label for=\"nonce\" sm={4}>Nonce</Label>\n                <Col sm={8}>\n                  <Input type=\"text\" name=\"nonce\" value={this.state.bloj.nonce} onChange={e => this.onChange('nonce', e.target.value)} />\n                </Col>\n              </FormGroup>\n            )}\n\n            <FormGroup row>\n              <Label for=\"data\" sm={4}>Data</Label>\n              <Col sm={8}>\n                <Input type=\"textarea\" name=\"data\" value={this.state.bloj.id ? JSON.stringify(this.state.bloj.data) : this.state.bloj.data} onChange={e => this.onChange('data', e.target.value)} />\n              </Col>\n            </FormGroup>\n\n            {this.state.bloj.prevHash && (\n              <FormGroup row>\n                <Label for=\"prevHash\" sm={4}>Previous hash</Label>\n                <Col sm={8}>\n                  <Input type=\"text\" name=\"prevHash\" value={this.state.bloj.prevHash} onChange={e => this.onChange('prevHash', e.target.value)} />\n                </Col>\n              </FormGroup>\n            )}\n\n            {this.state.bloj.timestamp && (\n              <FormGroup row>\n                <Label for=\"timestamp\" sm={4}>Timestamp</Label>\n                <Col sm={8}>\n                  <Input type=\"text\" name=\"timestamp\" value={this.state.bloj.timestamp} onChange={e => this.onChange('timestamp', e.target.value)} />\n                </Col>\n              </FormGroup>\n            )}\n\n            {this.state.bloj.hash && (\n              <FormGroup row>\n                <Label for=\"hash\" sm={4}>Hash</Label>\n                <Col sm={8}>\n                  <Input type=\"text\" name=\"hash\" value={this.state.bloj.hash} onChange={e => this.onChange('hash', e.target.value)} />\n                </Col>\n              </FormGroup>\n            )}\n\n            {this.state.bloj.confirmations !== undefined && (\n              <FormGroup row>\n                <Label for=\"confirmations\" sm={4}>Confirmations</Label>\n                <Col sm={8}>\n                  <Input type=\"text\" name=\"confirmations\" value={this.state.bloj.confirmations.length} onChange={e => this.onChange('confirmations', e.target.value)} />\n                </Col>\n              </FormGroup>\n            )}\n\n            {!this.state.bloj.id && (\n              <FormGroup check row>\n                <Col sm={{ size: 8, offset: 4 }}>\n                  <Button color=\"success\">Create</Button>\n                </Col>\n              </FormGroup>  \n            )}\n          </Form>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nexport default connect(() => ({}), {\n  createBloj,\n})(Bloj);","import React, { Component, } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport io from 'socket.io-client';\nimport { getBlojs, addBloj, updateBloj } from '../actions/blojs';\nimport { getMiningQueue, addBlojToMiningQueue, removeBlojFromMiningQueue } from '../actions/mining-queue';\nimport { getVerificationQueue, addBlojToVerificationQueue, removeBlojFromVerificationQueue } from '../actions/verification-queue';\nimport { getConfirmationQueue, addBlojToConfirmationQueue, removeBlojFromConfirmationQueue } from '../actions/confirmation-queue';\nimport { getLogs, addLog } from '../actions/logs';\nimport { Row, Col, Button } from 'reactstrap';\nimport Queue from '../components/Queue';\nimport Bloj from '../containers/Bloj';\nimport './Node.css';\n\nclass Node extends Component {\n  static propTypes = {\n    getBlojs: PropTypes.func.isRequired,\n    addBloj: PropTypes.func.isRequired,\n    updateBloj: PropTypes.func.isRequired,\n    getMiningQueue: PropTypes.func.isRequired,\n    addBlojToMiningQueue: PropTypes.func.isRequired,\n    removeBlojFromMiningQueue: PropTypes.func.isRequired,\n    getVerificationQueue: PropTypes.func.isRequired,\n    addBlojToVerificationQueue: PropTypes.func.isRequired,\n    removeBlojFromVerificationQueue: PropTypes.func.isRequired,\n    getConfirmationQueue: PropTypes.func.isRequired,\n    addBlojToConfirmationQueue: PropTypes.func.isRequired,\n    removeBlojFromConfirmationQueue: PropTypes.func.isRequired,\n    getLogs: PropTypes.func.isRequired,\n    addLog: PropTypes.func.isRequired,\n\n    blojs: PropTypes.object.isRequired,\n    node: PropTypes.object.isRequired,\n    miningQueue: PropTypes.object.isRequired,\n    verificationQueue: PropTypes.object.isRequired,\n    confirmationQueue: PropTypes.object.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      socket: null,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getBlojs(this.props.node);\n    this.props.getMiningQueue(this.props.node);\n    this.props.getVerificationQueue(this.props.node);\n    this.props.getConfirmationQueue(this.props.node);\n    this.props.getLogs(this.props.node);\n\n    const socket = io(`http://${this.props.node.meta.socketHost}:${this.props.node.meta.socketPort}`);\n    \n    socket.on(`${this.props.node.host}:bloj:create`, (bloj) => {\n      this.props.addBloj(bloj, this.props.node);\n    });\n\n    socket.on(`${this.props.node.host}:bloj:update`, (bloj) => {\n      this.props.updateBloj(bloj, this.props.node);\n    });\n\n    socket.on(`${this.props.node.host}:miner:push`, (bloj) => {\n      this.props.addBlojToMiningQueue(bloj, this.props.node);\n    });\n\n    socket.on(`${this.props.node.host}:miner:remove`, (bloj) => {\n      this.props.removeBlojFromMiningQueue(bloj, this.props.node);\n    });\n\n    socket.on(`${this.props.node.host}:verifier:push`, (bloj) => {\n      this.props.addBlojToVerificationQueue(bloj, this.props.node);\n    });\n\n    socket.on(`${this.props.node.host}:verifier:remove`, (bloj) => {\n      this.props.removeBlojFromVerificationQueue(bloj, this.props.node);\n    });\n\n    socket.on(`${this.props.node.host}:confirmer:push`, (bloj) => {\n      this.props.addBlojToConfirmationQueue(bloj, this.props.node);\n    });\n\n    socket.on(`${this.props.node.host}:confirmer:remove`, (bloj) => {\n      this.props.removeBlojFromConfirmationQueue(bloj, this.props.node);\n    });\n\n    socket.on(`${this.props.node.host}:log`, (log) => {\n      this.props.addLog(log, this.props.node);\n    });\n  }\n\n  render() {\n    const node = this.props.node;\n    const blojs = this.props.blojs;\n    const miningQueue = this.props.miningQueue;\n    const verificationQueue = this.props.verificationQueue;\n    const confirmationQueue = this.props.confirmationQueue;\n\n    const blojsError = blojs[node.meta.id] ? blojs[node.meta.id].error : null;\n    const miningQueueError = miningQueue[node.meta.id] ? miningQueue[node.meta.id].error : null;\n    const verificationQueueError = verificationQueue[node.meta.id] ? verificationQueue[node.meta.id].error : null;\n    const confirmationQueueError = confirmationQueue[node.meta.id] ? confirmationQueue[node.meta.id].error : null;\n    \n    const blojsLoading = blojs[node.meta.id] ? blojs[node.meta.id].loading : null;\n    const miningQueueLoading = miningQueue[node.meta.id] ? miningQueue[node.meta.id].loading : null;\n    const verificationQueueLoading = verificationQueue[node.meta.id] ? verificationQueue[node.meta.id].loading : null;\n    const confirmationQueueLoading = confirmationQueue[node.meta.id] ? confirmationQueue[node.meta.id].loading : null;\n\n    const blojItems = blojs[node.meta.id] ? blojs[node.meta.id].items : []; \n    const miningQueueItems = miningQueue[node.meta.id] ? miningQueue[node.meta.id].items : []; \n    const verificationQueueItems = verificationQueue[node.meta.id] ? verificationQueue[node.meta.id].items : []; \n    const confirmationQueueItems = confirmationQueue[node.meta.id] ? confirmationQueue[node.meta.id].items : []; \n\n    return (\n      <Row className=\"node\">\n        <Col xs={12}>\n          <div className=\"title clearfix\">\n            <h1 className=\"float-left\">{node.host}</h1>\n            \n            <a className=\"float-right\" href={`http://${node.meta.serverHost}:${node.meta.serverPort}/explorer`} target=\"_new\">\n              <Button color=\"primary\">Explorer</Button>\n            </a>\n          </div>\n\n          <Queue\n            title={`Blojchain (${blojItems.length})`}\n            open={true}\n            error={blojsError}\n            loading={blojsLoading}\n            forceScroll={true}\n          >\n            {blojItems.map((item, i) => (\n              <Col key={i} xs={12} md={6} lg={4}>\n                <Bloj\n                  node={node}\n                  bloj={item}\n                />\n              </Col>\n            ))}\n\n            <Col xs={12} md={6} lg={4}>\n              <Bloj\n                node={node}\n              />\n            </Col>\n          </Queue>\n        </Col>\n\n        <Col xs={12} lg={4}>\n          <Queue\n            title={`Mining queue (${miningQueueItems.length})`}\n            open={true}\n            error={miningQueueError}\n            loading={miningQueueLoading}\n          >\n            {miningQueueItems.map((item, i) => (\n              <Col key={i} xs={12}>\n                <Bloj\n                  bloj={item}\n                />\n              </Col>\n            ))}\n          </Queue>\n        </Col>\n\n        <Col xs={12} lg={4}>\n          <Queue\n            title={`Verification queue (${verificationQueueItems.length})`}\n            open={true}\n            error={verificationQueueError}\n            loading={verificationQueueLoading}\n            items={verificationQueueItems}\n          >\n            {verificationQueueItems.map((item, i) => (\n              <Col key={i} xs={12}>\n                <Bloj\n                  bloj={item}\n                />\n              </Col>\n            ))}\n          </Queue>\n        </Col>\n\n        <Col xs={12} lg={4}>\n          <Queue\n            title={`Confirmation queue (${confirmationQueueItems.length})`}\n            open={true}\n            error={confirmationQueueError}\n            loading={confirmationQueueLoading}\n            items={confirmationQueueItems}\n          >\n            {confirmationQueueItems.map((item, i) => (\n              <Col key={i} xs={12}>\n                <Bloj\n                  bloj={item}\n                />\n              </Col>\n            ))}\n          </Queue>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default connect((state) => ({\n  blojs: state.blojs.toJS(),\n  miningQueue: state.miningQueue.toJS(),\n  verificationQueue: state.verificationQueue.toJS(),\n  confirmationQueue: state.confirmationQueue.toJS(),\n}), {\n  getBlojs,\n  addBloj,\n  updateBloj,\n  getMiningQueue,\n  addBlojToMiningQueue,\n  removeBlojFromMiningQueue,\n  getVerificationQueue,\n  addBlojToVerificationQueue,\n  removeBlojFromVerificationQueue,\n  getConfirmationQueue,\n  addBlojToConfirmationQueue,\n  removeBlojFromConfirmationQueue,\n  getLogs,\n  addLog,\n})(Node);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport './Log.css';\n\nconst Log = (props) => (\n  <div className=\"log\">\n    <span className=\"host\" style={{color: props.log.node.colour}}>\n      {props.log.node.host}\n    </span>\n\n    <span className=\"timestamp\">\n      {moment(props.log.timestamp).format()}\n    </span>\n\n    <span className={props.log.type}>\n      {props.log.type}\n    </span>\n\n    <span className=\"message\">\n      {props.log.args.map((arg) => {\n        if (typeof arg !== 'string') {\n          arg = JSON.stringify(arg);\n        }\n\n        return `${arg} `\n      })}\n    </span>\n  </div>\n);\n\nLog.propTypes = {\n  log: PropTypes.object.isRequired,\n};\n\nexport default Log;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Log from './Log';\nimport { Button } from 'reactstrap';\nimport './Logger.css';\n\nclass Logger extends Component {\n  static propTypes = {\n    logs: PropTypes.array.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n\n    this.state = {\n      open: false,\n    };\n  }\n\n  componentDidUpdate() {\n    this.scroll.scrollTop = this.scroll.scrollHeight;\n  }\n\n  toggle(e) {\n    e.preventDefault();\n\n    this.setState({\n      open: !this.state.open,\n    }, () => {\n      const body = document.getElementsByTagName('body')[0];\n      const className = 'logger-open';\n\n      if (this.state.open) {\n        body.classList.add(className);\n      } else {\n        body.classList.remove(className);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className={`logger ${this.state.open && 'open'}`}>\n        <a href=\"#toggle\" onClick={this.toggle}>\n          <Button color=\"secondary\">\n            {this.state.open ? 'Minimise' : 'Maximise'}\n          </Button>\n        </a>\n\n        <div className=\"scroll\" ref={(elem) => { this.scroll = elem; }}>\n          {this.props.logs.map((log, i) => {\n            return (\n              <Log\n                key={i}\n                log={log}\n              />\n            )\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Logger;\n","import React, { Component, } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getNodes } from '../actions/nodes';\nimport getRandomColour from '../helpers/get-random-colour';\nimport Error from '../components/Error';\nimport Loading from '../components/Loading';\nimport Node from '../containers/Node';\nimport Logger from '../components/Logger';\nimport { Container, ListGroup, ListGroupItem } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nclass App extends Component {\n  static propTypes = {\n    getNodes: PropTypes.func.isRequired,\n\n    nodes: PropTypes.object.isRequired,\n    logs: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    this.props.getNodes();\n  }\n\n  render() {\n    const nodes = this.props.nodes.toJS();\n    const error = nodes.error;\n    const items = nodes.items;\n\n    const logs = this.props.logs.toJS().items;\n\n    if (error) {\n      return <Error message={error.message} />\n    }\n\n    if (!error && !items.length) {\n      return <Loading />\n    }\n\n    return (\n      <Container className=\"app\">\n        <ListGroup>\n          {items.map((node, i) => {\n            node.colour = getRandomColour();\n\n            return (\n              <ListGroupItem key={i}>\n                <Node\n                  node={node}\n                />\n              </ListGroupItem>\n            );\n          })}\n        </ListGroup>\n\n        <Logger\n          logs={logs}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default connect((state) => ({\n  nodes: state.nodes,\n  logs: state.logs,\n}), {\n  getNodes,\n})(App);","export default function getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  \n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  \n  return color;\n}","import dotenv from 'dotenv'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { configureStore } from './store';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\n\ndotenv.config()\n\nconst store = configureStore();\n\nReactDOM.render((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n\n","import createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducers'\nimport sagas from './sagas';\n\nexport function configureStore() {\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\n  sagaMiddleware.run(sagas);\n\n  return store;\n}\n"],"sourceRoot":""}